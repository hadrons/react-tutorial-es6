import React from 'react';
import { default as $ } from 'jquery';

import CommentList from './comment-list';
import CommentForm from './comment-form';

export default class CommentBox extends React.Component {
    state = { data: [] }

    loadCommentsFromServer () {
        $.get(this.props.url)
            .done((data) => this.setState({ data: data }))
            .fail((xhr, status, err) => console.error(this.props.url, status, err.toString()));
    }

    handleCommentSubmit = (comment) => {
        let comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        let newComments = comments.concat([comment]);
        this.setState({data: newComments});
        $.post(this.props.url, JSON.stringify(comment))
            .done((data) => this.setState({data: data}), 'json')
            .fail((xhr, status, err) => {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            });
    }

    componentDidMount () {
        this.loadCommentsFromServer();
        setInterval(() => this.loadCommentsFromServer(), this.props.pollInterval);
    }

    render () {
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList data={this.state.data}/>
                <CommentForm onCommentSubmit={this.handleCommentSubmit}/>
            </div>
        );
    }
}